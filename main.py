from pyrogram import Client, filters
from pyrogram.errors import FloodWait

import time
from datetime import datetime
from random import randint
from time import sleep
import random

from config import *
from db_work import Database
from messages import *

app = Client("my_account", api_id=configID, api_hash=configHASH)
db = Database()


# –æ—Ç–ø—Ä–∞–≤–∏—Ç—å 1000-7 -14 -21 –∏ –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ –Ω–∞—á–∞–ª–µ
@app.on_message(filters.command("ded_inside", prefixes=".") & filters.me)
def ded_inside(_, msg):
    msg.delete()
    app.send_photo(msg.chat.id, "gul.jpg")
    x = 1000
    while x > 0:
        app.send_message(msg.chat.id, str(x) + "-7")
        x -= 7


# —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@app.on_message(filters.command("help", prefixes=".") & filters.me)
def help(_, msg):
    msg.edit(ALLCOMMANDS)


# –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏ 100 —Ä–∞–∑
@app.on_message(filters.command("spoki", prefixes=".") & filters.me)
def spoki(_, msg):
    msg.delete()
    for i in range(100):
        app.send_message(msg.chat.id, "ùöúùöôùöòùöîùöòùöíùöóùöòùöí ùöóùöòùöåùöëùöí")


# –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ –ø–æ —Å—Ç—Ä–æ—á–∫–∞–º (–¥–µ–ª–∏—Ç –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ)
@app.on_message(filters.command("song", prefixes=".") & filters.me)
def spoki(_, msg):
    msg.delete()
    s = msg.text[6:].split("\n")
    for i in s:
        app.send_message(msg.chat.id, i)
        sleep(0.1)


# –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–æ–∫–∏ 1 —Ä–∞–∑
@app.on_message(filters.command("spoki_one", prefixes=".") & filters.me)
def spoki_one(_, msg):
    msg.delete()
    app.send_message(msg.chat.id, "ùöúùöôùöòùöîùöòùöíùöóùöòùöí ùöóùöòùöåùöëùöí")


# auto game for the theorem 3x + 1 ---> 1
@app.on_message(filters.command("3x1game", prefixes=".") & filters.me)
def fuckingGAME(_, msg):
    x = int(msg.text[12:])
    msg.delete()
    while x != 1:
        if x % 2 == 0:
            x //= 2
        else:
            x = x * 3 + 1
        app.send_message(msg.chat.id, x)
        sleep(0.1)


# –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ -- ".spam 10 some words"
@app.on_message(filters.command("spam", prefixes=".") & filters.me)
def spam(_, msg):
    msg.delete()
    s = msg.text[6:].split(" ", maxsplit=1)
    for i in range(int(s[0])):
        sleep(0.5)
        app.send_message(msg.chat.id, s[1])


# –û—Ç–ø—Ä–∞–≤–∏—Ç—å RIP
@app.on_message(filters.command("rip", prefixes=".") & filters.me)
def rip(_, msg):
    msg.edit(RIP)


# –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ—Ä–¥—á–µ–∫–æ
@app.on_message(filters.command("love2", prefixes=".") & filters.me)
def rip(_, msg):
    msg.edit(LOVE2)


# –û—Ç–ø—Ä–∞–≤–∏—Ç—å LOVE
@app.on_message(filters.command("love", prefixes=".") & filters.me)
def love(_, msg):
    for i in LOVE:
        sleep(0.5)
        msg.edit(i)


# –û—Ç–ø—Ä–∞–≤–∏—Ç—å PRESS_F
@app.on_message(filters.command("pressF", prefixes=".") & filters.me)
def pressF(_, msg):
    msg.edit(PRESSF)

# –û—Ç–ø—Ä–∞–≤–∏—Ç—å PRESSF2
@app.on_message(filters.command("pressF2", prefixes=".") & filters.me)
def pressf2(_, msg):
    msg.edit(PRESSF2)


# –û—Ç–ø—Ä–∞–≤–∏—Ç—å LOL
@app.on_message(filters.command("lol", prefixes=".") & filters.me)
def lol(_, msg):
    msg.edit(LOL)


# –û—Ç–ø—Ä–∞–≤–∏—Ç—å bruh
@app.on_message(filters.command("bruh", prefixes=".") & filters.me)
def bruh(_, msg):
    msg.edit(BRUH)


# –ò–∑–º–µ–Ω—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–Ω–¥–æ–º–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏ —É–¥–∞–ª—è—Ç—å
@app.on_message(filters.command("randwords", prefixes=".") & filters.me)
def randwords(_, msg):
    cnt = int(msg.text.split(".randwords ", maxsplit=1)[1])
    last = -1
    for i in range(cnt):
        now = randint(0, CNTRANDOMWORDS - 1)
        while now == last:
            now = randint(0, CNTRANDOMWORDS - 1)
        last = now

        try:
            msg.edit(RANDOWWORDS[now])
            sleep(0.1)
        except FloodWait as e:
            sleep(e.x)

    msg.delete()


# –°—Ç–∏–∫–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±–∏–≤–∞–µ—Ç —à–µ—Å—Ç—å –Ω–∞ –∫—É–±–∏–∫–µ
@app.on_message(filters.command("cube", prefixes=".") & filters.me)
def cube(_, msg):
    try:
        emoj = msg.text.split(".cube ", maxsplit=1)[1]
        msg.delete()
    except Exception as error:
        msg.edit("neeeeeed emoji")
        sleep(5)
        msg.delete()
        return

    need = 6

    if emoj == "üèÄ":
        need = 5
    elif emoj == "‚öΩÔ∏è":
        need = 5

    test = app.send_dice(msg.chat.id, emoj)
    while test.dice.value != need:
        test.delete()
        test = app.send_dice(msg.chat.id, emoj)


# –ö–æ–º–∞–Ω–¥–∞ type
@app.on_message(filters.command("type", prefixes=".") & filters.me)
def type(_, msg):
    orig_text = msg.text.split(".type ", maxsplit=1)[1]
    text = orig_text
    tbp = ""  # to be printed
    typing_symbol = "-"

    while (tbp != orig_text):
        try:
            msg.edit(tbp + typing_symbol)
            sleep(0.05)  # 50 ms

            tbp = tbp + text[0]
            text = text[1:]

            msg.edit(tbp)
            sleep(0.05)

        except FloodWait as e:
            sleep(e.x)


# –ö–æ–º–∞–Ω–¥–∞ –≤–∑–ª–æ–º–∞ –ø–µ–Ω—Ç–∞–≥–æ–Ω–∞
@app.on_message(filters.command("hack", prefixes=".") & filters.me)
def hack(_, msg):
    perc = 0

    while (perc < 100):
        try:
            text = "üëÆ‚Äç –í–∑–ª–æ–º –ø–µ–Ω—Ç–∞–≥–æ–Ω–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ ..." + str(perc) + "%"
            msg.edit(text)

            perc += random.randint(1, 3)
            sleep(0.1)

        except FloodWait as e:
            sleep(e.x)

    msg.edit("üü¢ –ü–µ–Ω—Ç–∞–≥–æ–Ω —É—Å–ø–µ—à–Ω–æ –≤–∑–ª–æ–º–∞–Ω!")
    sleep(3)

    msg.edit("üëΩ –ü–æ–∏—Å–∫ —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–± –ù–õ–û ...")
    perc = 0

    while (perc < 100):
        try:
            text = "üëΩ –ü–æ–∏—Å–∫ —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–± –ù–õ–û ..." + str(perc) + "%"
            msg.edit(text)

            perc += random.randint(1, 5)
            sleep(0.15)

        except FloodWait as e:
            sleep(e.x)

    msg.edit("ü¶ñ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–∏ –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤ –Ω–∞ –∑–µ–º–ª–µ!")


# –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ê–§–ö —Ä–µ–∂–∏–º
@app.on_message(filters.command("afk", prefixes=".") & filters.me)
def afk(_, msg):
    db.set_my_afk(1)
    if msg.text == ".afk":
        orig_text = "null"
    else:
        orig_text = msg.text.split(".afk ", maxsplit=1)[1]
    db.set_reason(orig_text)
    db.set_time_afk(time.time())
    text = f'''<b>–Ø —Ç–µ–ø–µ—Ä—å –≤ AFK.</b>'''
    msg.edit(text)


# –í—ã—Ö–æ–¥ –∏–∑ –ê–§–ö —Ä–µ–∂–∏–º–∞
@app.on_message(filters.command("unafk", prefixes=".") & filters.me)
def unafk(_, msg):
    db.set_my_afk(0)
    text = f"<b>–Ø –±–æ–ª—å—à–µ –Ω–µ –≤ AFK.</b>"
    msg.edit(text)


# –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@app.on_message(filters.private)
async def hello(client, message):
    # print(message)
    if str(message.chat.type) == "ChatType.PRIVATE":
        if my != message.from_user.id and db.get_my_afk() == 1:
            current_time = datetime.fromtimestamp(int(time.time()) - db.get_time_afk())
            if db.get_reason() == "null":
                text = f'''<b>–Ø —Å–µ–π—á–∞—Å –≤ AFK(–£–∂–µ {current_time.hour - 3}:{current_time.minute}:{current_time.second}).</b>'''
            else:
                text = f'''<b>–Ø —Å–µ–π—á–∞—Å –≤ AFK(–£–∂–µ {current_time.hour - 3}:{current_time.minute}:{current_time.second}).
–ü—Ä–∏—á–∏–Ω–∞: </b>''' + db.get_reason()
            await message.reply_text(text)


app.run()
